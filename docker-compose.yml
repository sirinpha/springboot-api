services:
  #PostgreSQL Database for the application
  postgres:
    image: postgres
    restart: always
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=123456
    networks:
      - app-network
    volumes:  #กำหนดการแมปไฟล์
      - postgres-data:/var/lib/postgresql/data
      - ./init-postgres.sh:/docker-entrypoint-initdb.d/init-postgres.sh
    healthcheck:  #ตรวจสอบสถานะของคอนเทนเนอร์
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 1s
      timeout: 5s
      retries: 10

  #Back-end Spring Boot application
  spring-api:
    build: ./spring-api
    container_name: spring-api
    depends_on:
      - postgres
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/postgres  # เปลี่ยนจาก localhost เป็น postgres
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=123456
    ports:
      - "8082:8082"
    networks:
      - app-network

  #Angular Frontend application
  angular-app:
    image: angular-jwt:1.0
    container_name: angular-app
    ports:
      - "4205:80"
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data: